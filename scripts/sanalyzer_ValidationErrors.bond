void UnterminatedSwitchSection(int x)
{
	switch (x)
	{
		case 1:
			x = 2;
		case 2:
			x = 3;
			break;
	}
}

void InvalidBreakAndContinue(int x)
{
	if (x == 1)
	{
		break;
	}
	else
	{
		continue;
	}
}

int NotAllPathsReturnAValue1(int x)
{
	// No default case.
	switch (x)
	{
		case 1:
			return 2;
		case 2:
			return 3;
	}
}

int NotAllPathsReturnAValue2(int x)
{
	// No else clause.
	if (x == 1)
	{
		return 2;
	}
}

int NotAllPathsReturnAValue3(int x)
{
	// Nested branches.
	if (x == 1)
	{
		switch (x)
		{
			case 1:
				break;
			default:
				return 2;
		}
	}
	else
	{
		return 3;
	}
}

int UnreachableCode1(int x)
{
	return x;
	x = 5;
}

int UnreachableCode2(int x)
{
	switch (x)
	{
		case 1:
			return 2;
		default:
		case 2:
			return 3;
	}
	x = 5;
}

int UnreachableCode3(int x)
{
	if (x == 1)
	{
		return 2;
	}
	else
	{
		return 3;
	}
	x = 5;
}

void UnreachableCode4(int x)
{
	while (x < 5)
	{
		if (x == 1)
		{
			break;
		}
		else
		{
			continue;
		}
		x = 5;
	}
}

void *InvalidReturnType(float x)
{
	return x;
}

// All functions below are valid.
void ValidBreakAndContinue(int x)
{
	while (x < 5)
	{
		if (x == 1)
		{
			break;
		}
		else
		{
			continue;
		}
	}

	while (x < 5)
	{
		switch (x)
		{
			case 1:
				if (x == 1)
				{
					continue;
				}
				break;
		}
	}
}

int AllPathsReturnAValue1(int x)
{
	return x;
}

int AllPathsReturnAValue2(int x)
{
	switch (x)
	{
		case 1:
			return 2;
		default:
		case 2:
			return 3;
	}
}

int AllPathsReturnAValue3(int x)
{
	if (x == 1)
	{
		return 2;
	}
	else
	{
		return 3;
	}
}

int AllPathsReturnAValue4(int x)
{
	if (x == 1)
	{
		switch (x)
		{
			case 1:
				return 1;
			default:
				return 2;
		}
	}
	else
	{
		return 3;
	}
}

native { struct NativePoint { float x; float y; }; }

struct Point { NativePoint p; };

NativePoint UseTypeOfUndefinedSize(NativePoint p1)
{
	NativePoint[2] p2;
	p2[0] = p1;
	return *(p2 + 1);
 }
