struct Char3
{
	char x;
	char y;
	char z;
};

struct Char3Pair
{
	Char3 first;
	Char3 second;
};

void SetChar3(Char3 *c3, char x, char y, char z)
{
	c3->x = x;
	c3->y = y;
	c3->z = z;
}

int GetChar3X(Char3 c3)
{
	return c3.x;
}

int GetChar3Y(Char3 c3)
{
	return c3.y;
}

int GetChar3Z(Char3 c3)
{
	return c3.z;
}

void SetChar3PairX(Char3Pair *c3p, char x1, char x2)
{
	c3p->first.x = x1;
	c3p->second.x = x2;
}

bool InitializeChar3Pair()
{
	Char3Pair c3p;
	SetChar3(&c3p.first, 9, 8, 7);
	SetChar3(&c3p.second, 11, 22, 33);
	return (c3p.first.x == 9) && (c3p.first.y == 8) && (c3p.first.z == 7) &&
		(c3p.second.x == 11) && (c3p.second.y == 22) && (c3p.second.z == 33);
}

struct Vector3
{
	int GetX() const { return this->mX; }
	void SetX(int x) { this->mX = x; }

	int GetY() const { return mY; }
	void SetY(int y) { mY = y; }

	int GetZ() const { return mZ; }
	void SetZ(int z) { mZ = z; }

	int Dot(const Vector3 *other) const { return this->GetX() * other->GetX() + GetY() * other->GetY() + mZ * other->GetZ(); }

	int mX;
	int mY;
	int mZ;
};

Vector3 ConstructVector3(int x, int y, int z)
{
	Vector3 v3;
	v3.mX = x;
	v3.mY = y;
	v3.mZ = z;
	return v3;
}

Vector3 ConstructVector3Indirect(int x, int y, int z)
{
	Vector3 v3a = ConstructVector3(x, y, z);
	Vector3 v3b;
	Vector3 v3c;
	v3c = v3b = v3a;
	return v3c;
}

void SetVector3(Vector3 *v3, int x, int y, int z)
{
	v3->SetX(x);
	v3->SetY(y);
	v3->SetZ(z);
}

int GetVector3X(Vector3 v3)
{
	return v3.GetX();
}

int GetVector3Y(Vector3 v3)
{
	return v3.GetY();
}

int GetVector3Z(Vector3 v3)
{
	return v3.GetZ();
}

int ConstructVector3AndGetY(int y)
{
	return ConstructVector3(0xbadbad, y, 0xbadbad).mY;
}

Vector3 SelectVector3(bool condition, Vector3 a, Vector3 b)
{
	Vector3 c = condition ? a : b;
	return c;
}
