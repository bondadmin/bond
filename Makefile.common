#http://wiki.osdev.org/Makefile

# Bond library files, folders and configuration.
INCLUDEDIR := include
SRCDIR := source
SRCFILE := $(SRCDIR)/%.cpp
OBJDIR := $(BLDDIR)/obj/bond
OBJFILE := $(OBJDIR)/%$(OBJ_SUFFIX)
OBJDEPFILE := $(OBJDIR)/%$(DEP_SUFFIX)
SRCFILES := $(wildcard $(SRCDIR)/*.cpp)
OBJFILES := $(patsubst $(SRCFILE),$(OBJFILE),$(SRCFILES))
DEPFILES := $(patsubst $(SRCFILE),$(OBJDEPFILE),$(SRCFILES))
LIB := $(LIBDIR)/$(LIB_PREFIX)bond$(LIB_SUFFIX)
CFLAGS := $(BASE_CFLAGS) $(INCLUDE_CFLAGS) $(INCLUDEDIR) $(INCLUDE_CFLAGS) $(SRCDIR)

# Tool files, folders and configuration.
TOOL := %
TOOL_SRCDIR := tools
TOOL_SRCFILE := $(TOOL_SRCDIR)/%.cpp
TOOL_EXEDIR := $(BLDDIR)/bin
TOOL_EXEFILE := $(TOOL_EXEDIR)/%$(EXE_SUFFIX)
TOOL_SRCFILES := $(wildcard $(TOOL_SRCDIR)/*.cpp)
TOOL_EXEFILES := $(patsubst $(TOOL_SRCFILE),$(TOOL_EXEFILE),$(TOOL_SRCFILES))
TOOL_EXEDEPFILE := $(TOOL_EXEDIR)/%$(DEP_SUFFIX)
TOOL_DEPFILES := $(patsubst $(TOOL_SRCFILE),$(TOOL_EXEDEPFILE),$(TOOL_SRCFILES))
TOOLS := $(patsubst $(TOOL_SRCFILE),$(TOOL),$(TOOL_SRCFILES))
TOOL_CFLAGS := $(BASE_CFLAGS) $(INCLUDE_CFLAGS) $(INCLUDEDIR)

# Util files, folders and configuration.
UTIL := %
UTIL_SRCDIR := util
UTIL_SRCFILE := $(UTIL_SRCDIR)/%.cpp
UTIL_EXEDIR := $(BLDDIR)/util
UTIL_EXEFILE := $(UTIL_EXEDIR)/%$(EXE_SUFFIX)
UTIL_SRCFILES := $(wildcard $(UTIL_SRCDIR)/*.cpp)
UTIL_EXEFILES := $(patsubst $(UTIL_SRCFILE),$(UTIL_EXEFILE),$(UTIL_SRCFILES))
UTIL_EXEDEPFILE := $(UTIL_EXEDIR)/%$(DEP_SUFFIX)
UTIL_DEPFILES := $(patsubst $(UTIL_SRCFILE),$(UTIL_EXEDEPFILE),$(UTIL_SRCFILES))
UTILS := $(patsubst $(UTIL_SRCFILE),$(UTIL),$(UTIL_SRCFILES))
UTIL_CFLAGS := $(BASE_CFLAGS)

# Test Framework library files, folders and configuration.
TF_SRCDIR := test/framework
TF_SRCFILE := $(TF_SRCDIR)/%.cpp
TF_OBJDIR := $(BLDDIR)/obj/testframework
TF_OBJFILE := $(TF_OBJDIR)/%$(OBJ_SUFFIX)
TF_OBJDEPFILE := $(TF_OBJDIR)/%$(DEP_SUFFIX)
TF_SRCFILES := $(wildcard $(TF_SRCDIR)/*.cpp)
TF_OBJFILES := $(patsubst $(TF_SRCFILE),$(TF_OBJFILE),$(TF_SRCFILES))
TF_DEPFILES := $(patsubst $(TF_SRCFILE),$(TF_OBJDEPFILE),$(TF_SRCFILES))
TF_LIB := $(LIBDIR)/$(LIB_PREFIX)framework$(LIB_SUFFIX)
TF_CFLAGS := $(BASE_CFLAGS) $(INCLUDE_CFLAGS) $(INCLUDEDIR) $(INCLUDE_CFLAGS) test

# Unit Test files, folders and configuration.
UT_TEST := %
UT_SRCDIR := test
UT_SRCFILE := $(UT_SRCDIR)/%.cpp
UT_EXEDIR := $(BLDDIR)/testbin
UT_EXEFILE := $(UT_EXEDIR)/%$(EXE_SUFFIX)
UT_SRCFILES := $(wildcard $(UT_SRCDIR)/*.cpp)
UT_EXEFILES := $(patsubst $(UT_SRCFILE),$(UT_EXEFILE),$(UT_SRCFILES))
UT_EXEDEPFILE := $(UT_EXEDIR)/%$(DEP_SUFFIX)
UT_DEPFILES := $(patsubst $(UT_SRCFILE),$(UT_EXEDEPFILE),$(UT_SRCFILES))
UT_TESTS := $(patsubst $(UT_SRCFILE),$(UT_TEST),$(UT_SRCFILES))
UT_CFLAGS := $(BASE_CFLAGS) $(INCLUDE_CFLAGS) $(INCLUDEDIR) $(INCLUDE_CFLAGS) test


.PHONY: all check clean deepclean libinclude test tools tags utils

# Not sure why executables are considered to be generated by implicit rules when the rules are
# listed below, but they are. The consequence is that make deletes the executables after the rules
# that generate them run unless they are marked as precious.
.PRECIOUS: $(UT_EXEFILES) $(TOOL_EXEFILES) $(UTIL_EXEFILES)

all: $(LIB)

clean:
	$(RM) -rf $(BLDDIR)

deepclean:
	$(RM) -rf $(BLDDIR) TAGS vs/*/*.sdf vs/*/*.suo vs/*/*.user vs/*/ipch

tags:
	rm -f TAGS
	$(ETAGS) --language-force=C++ -R $(PWD)/$(INCLUDEDIR) $(PWD)/$(SRCDIR) $(PWD)/$(TOOL_SRCDIR) $(PWD)/$(UT_SRCDIR)


# Bond library targets.
$(LIB): $(OBJFILES)
	@$(MKDIR) -p $(LIBDIR)
	$(AR) rcs $(LIB) $?

-include $(DEPFILES)

$(OBJFILE): $(SRCFILE) Makefile.common
	@$(MKDIR) -p $(OBJDIR)
	$(CC) $(CFLAGS) $(DEP_CFLAGS) $(COMP_CFLAGS) $< $(OUT_CFLAGS) $@

check: $(SRCFILES)
	$(CHECK) -DBOGUS_CONFIG --enable=all -I $(INCLUDEDIR) -I $(SOURCEDIR) $^


# Tool targets.
tools: $(TOOLS)

$(TOOL): $(TOOL_EXEFILE) ;

-include $(TOOL_DEPFILES)

$(TOOL_EXEFILE): $(TOOL_SRCFILE) Makefile.common $(LIB)
	@$(MKDIR) -p $(TOOL_EXEDIR)
	$(CC) $(TOOL_CFLAGS) $(DEP_CFLAGS) $< $(LIB) $(OUT_CFLAGS) $@


# Test Framework targets.
framework: $(TF_LIB)

$(TF_LIB): $(TF_OBJFILES)
	@$(MKDIR) -p $(LIBDIR)
	$(AR) rcs $(TF_LIB) $?

-include $(TF_DEPFILES)

$(TF_OBJFILE): $(TF_SRCFILE) Makefile.common
	@$(MKDIR) -p $(TF_OBJDIR)
	$(CC) $(TF_CFLAGS) $(DEP_CFLAGS) $(COMP_CFLAGS) $< $(OUT_CFLAGS) $@


# Unit Test targets.
test: $(UT_TESTS)

$(UT_TEST): $(UT_EXEFILE)
ifeq ($(CROSS_COMPILE), true)
	echo $<
else
	$<
endif

-include $(UT_DEPFILES)

$(UT_EXEFILE): $(UT_SRCFILE) Makefile.common $(LIB) $(TF_LIB)
	@$(MKDIR) -p $(UT_EXEDIR)
	$(CC) $(UT_CFLAGS) $(DEP_CFLAGS) $< $(TF_LIB) $(LIB) $(OUT_CFLAGS) $@


ifneq ($(CROSS_COMPILE), "true")

# Util targets.
utils: $(UTILS)

$(UTIL): $(UTIL_EXEFILE) ;

-include $(UTIL_DEPFILES)

$(UTIL_EXEFILE): $(UTIL_SRCFILE) Makefile.common
	@$(MKDIR) -p $(UTIL_EXEDIR)
	$(CC) $(UTIL_CFLAGS) $(DEP_CFLAGS) $< $(OUT_CFLAGS) $@


# Embed the standard library .bond files.
libinclude: embedfile
	cd lib; ../$(UTIL_EXEDIR)/embedfile -h ../include/bond/private/libinclude_embedded.h -c ../source/private/libinclude_embedded_cpp.h include/*.bond

endif
