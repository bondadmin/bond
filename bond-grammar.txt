External Definitions
--------------------

translation_unit
  : external_declaration*

external_declaration
  : namespace_definition
  | enum_declaration
  | function_declaration
  | function_definition
  | struct_declaration
  | const_declarative_statement

namespace_definition
  : NAMESPACE IDENTIFIER '{' external_declaration* '}'

function_definition
  : function_prototype compound_statement


Declarations
------------

function_declaration
  : function_prototype ';'

function_prototype
  : type_descriptor IDENTIFIER '(' [parameter_list] ')'

parameter_list
  : parameter
  | parameter_list ',' parameter

parameter
  : type_descriptor IDENTIFIER

enum_declaration
  : ENUM IDENTIFIER '{' enumerator_list [',] '}' ';'

enumerator_list
  : enumerator
  | enumerator_list ',' enumerator

enumerator
  : IDENTIFIER ['=' const_expression]

struct_declaration
  : STRUCT IDENTIFIER '{' struct_member_declaration+ '}' ';'

*struct_member_declaration
  : type_descriptor identifier_list ';'
  | function_declaration

type_descriptor
  : CONST type_specifier
  | type_specifier [CONST]
  | type_descriptor '*' [CONST]
  | type_descriptor '[' [const_expression] ']'

type_specifier
  : primitive_type_specifier
  | qualified_id

primitive_type_specifier
  : VOID
  | BOOL
  | CHAR
  | INT
  | UINT
  | FLOAT

named_initializer_list
  : named_initializer
  | named_initializer_list ',' named_initializer

named_initializer
  : IDENTIFIER ['=' initializer]

*initializer_list
  : initializer
  | initializer_list ',' initializer

initializer
  : assignment_expression
  | '{' initializer_list [','] '}'

identifier_list
  : IDENTIFIER
  | identifier_list ',' IDENTIFIER

qualified_id
  : IDENTIFIER
  | IDENTIFIER '::' qualified_id


Statements
----------

statement
  : compound_statement
  | if_statement
  | switch_statement
  | while_statement
  | do_statement
  | for_statement
  | jump_statement
  | declarative_statement
  | expression_statement

compound_statement
  : '{' statement* '}'

if_statement
  : IF '(' expression ')' statement [ELSE statement]

switch_statement
  : SWITCH '(' expression ')' '{' switch_section* '}'

switch_section
  : switch_label+ statement+

switch_label
  : CASE const_expression ':'
  | DEFAULT ':'

while_statement
  : WHILE '(' expression ')' statement

do_statement
  : DO statement WHILE '(' expression ')' ';'

for_statement
  : FOR '(' for_init [expression] ';' [expression] ')' statement

for_init
  : declarative_statement
  | expression_statement

jump_statement
  : CONTINUE ';'
  | BREAK ';'
  | RETURN [expression] ';'

declarative_statement
  : type_descriptor named_initializer_list ';'

*const_declarative_statement
  : declarative_statement 
  With restrictions regarding constness enforced by the semantic analyser, not the grammar of the language.

expression_statement
  : [expression] ';'


Expressions
-----------

primary_expression
  : qualified_id
  | CONSTANT
  | '(' expression ')'

postfix_expression
  : primary_expression
  | postfix_expression '[' expression ']'
  | postfix_expression '(' [argument_expression_list] ')'
  | postfix_expression '.' IDENTIFIER
  | postfix_expression '->' IDENTIFIER
  | postfix_expression '++'
  | postfix_expression '--'

argument_expression_list
  : assignment_expression
  | argument_expression_list ',' assignment_expression

unary_expression
  : postfix_expression
  | '++' unary_expression
  | '--' unary_expression
  | '&' cast_expression
  | '*' cast_expression
  | '+' cast_expression
  | '-' cast_expression
  | '~' cast_expression
  | '!' cast_expression
  | SIZEOF unary_expression
  | SIZEOF '<' type_descriptor '>'

cast_expression
  : unary_expression
  | CAST '<' type_descriptor '>' '(' cast_expression ')'

multiplicative_expression
  : cast_expression
  | multiplicative_expression '*' cast_expression
  | multiplicative_expression '/' cast_expression
  | multiplicative_expression '%' cast_expression

additive_expression
  : multiplicative_expression
  | additive_expression '+' multiplicative_expression
  | additive_expression '-' multiplicative_expression

shift_expression
  : additive_expression
  | shift_expression '<<' additive_expression
  | shift_expression '>>' additive_expression

relational_expression
  : shift_expression
  | relational_expression '<' shift_expression
  | relational_expression '>' shift_expression
  | relational_expression '<=' shift_expression
  | relational_expression '>=' shift_expression

equality_expression
  : relational_expression
  | equality_expression '==' relational_expression
  | equality_expression '!=' relational_expression

and_expression
  : equality_expression
  | and_expression '&' equality_expression

exclusive_or_expression
  : and_expression
  | exclusive_or_expression '^' and_expression

inclusive_or_expression
  : exclusive_or_expression
  | inclusive_or_expression '|' exclusive_or_expression

logical_and_expression
  : inclusive_or_expression
  | logical_and_expression '&&' inclusive_or_expression

logical_or_expression
  : logical_and_expression
  | logical_or_expression '||' logical_and_expression

conditional_expression
  : logical_or_expression
  | logical_or_expression '?' expression ':' conditional_expression

assignment_expression
  : conditional_expression
  | unary_expression '=' assignment_expression
  | unary_expression '<<=' assignment_expression
  | unary_expression '>>=' assignment_expression
  | unary_expression '+=' assignment_expression
  | unary_expression '-=' assignment_expression
  | unary_expression '*=' assignment_expression
  | unary_expression '/=' assignment_expression
  | unary_expression '%=' assignment_expression
  | unary_expression '&=' assignment_expression
  | unary_expression '^=' assignment_expression
  | unary_expression '|=' assignment_expression

expression
  : assignment_expression
  | expression ',' assignment_expression

const_expression
  : conditional_expression
